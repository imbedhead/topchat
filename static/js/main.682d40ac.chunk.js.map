{"version":3,"sources":["js/Chat/Badge.js","js/Chat/BadgeList.js","js/Chat/Messages/Emote.js","js/Chat/Messages/Clip.js","js/Chat/Messages/Link.js","js/Chat/Messages/Text.js","js/Chat/Chat.js","js/Main/Streamer.js","js/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Badge","props","badgeType","className","key","this","badgeName","toLowerCase","OverlayTrigger","placement","overlay","Tooltip","id","Date","valueOf","src","getBadgeTooltipUrl","alt","React","Component","BadgeList","badges","map","badge","name","type","Emote","url","substring","lastIndexOf","getLargeEmoteUrl","emote","urls","srcSet","Clip","link","parse","substr","indexOf","parseClipLink","allowFullScreen","title","Link","isClip","href","target","rel","Text","msg","isLink","Chat","index","message","user","userCardUrl","badgeList","chatClass","time","style","username","i","Streamer","state","streamerInput","e","setState","value","onClickHandler","onChange","changeHandler","bind","placeholder","onClick","clickHandler","streamer","Main","scrollToBottom","messagesEnd","scrollIntoView","behavior","Container","fluid","streamerClickHandler","Row","Col","sm","xs","msgs","float","clear","ref","el","width","height","EMOTES","currentEmotes","App","topChats","ComfyJS","onChat","flags","self","extra","appendMessage","currentStreamer","window","addEventListener","resizeHandler","top","bottom","Number","replace","document","documentElement","clientHeight","clientWidth","header","getElementById","computedStyle","getComputedStyle","iframe","offsetHeight","getPadding","paddingTop","paddingBottom","Disconnect","Init","updateUrl","getEmotes","fetch","then","response","json","error","massagedEmote","forEach","code","size","lastRetrieved","allEmotes","joinStream","GLOBAL_EMOTES","split","str","getEmote","join","isElevatedUser","userMessage","broadcaster","push","mod","vip","userBadges","partner","console","log","allChat","newEntry","parseForEmotes","timestamp","toTimeString","color","userColor","length","shift","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.682d40ac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Badge.scss\"\r\nimport {OverlayTrigger, Tooltip} from \"react-bootstrap\";\r\n\r\nclass Badge extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.badgeType = \"chat-badge \" + this.props.className;\r\n        this.key = this.props.key;\r\n    }\r\n\r\n    /**\r\n     * Get the url of the largest badge img for the tooltip\r\n     * @returns {string}\r\n     */\r\n    getBadgeTooltipUrl() {\r\n        return `https://cdn.frankerfacez.com/static/badges/twitch/2/${this.props.badgeName.toLowerCase()}/1/4.png`\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <OverlayTrigger\r\n                key={`badge-top-${new Date().valueOf()}`}\r\n                placement=\"top\"\r\n                overlay={\r\n                    <Tooltip id={`tooltip-badge-${new Date().valueOf()}`}>\r\n                        <img className={this.badgeType} src={this.getBadgeTooltipUrl()} alt={this.props.badgeName}/>\r\n                        <div>{this.props.badgeName}</div>\r\n                    </Tooltip>\r\n                }>\r\n                <span key={this.key} className={this.badgeType}/>\r\n            </OverlayTrigger>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Badge;\r\n","import React from \"react\";\r\nimport Badge from \"./Badge\";\r\n\r\nclass BadgeList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.badges = this.props.badges;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <span>\r\n                {this.badges.map(badge => <Badge key={badge.key} badgeName={badge.name} className={badge.type}/>)}\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BadgeList;\r\n","import React from \"react\";\r\nimport {OverlayTrigger, Tooltip} from \"react-bootstrap\";\r\n\r\nclass Emote extends React.Component {\r\n\r\n    /**\r\n     * Get the largest emote url to display in tooltip\r\n     * @param url\r\n     * @returns {string}\r\n     */\r\n    getLargeEmoteUrl(url) {\r\n        return url.substring(url.lastIndexOf(\",\") + 1, url.lastIndexOf(\" \"))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <span>\r\n                <OverlayTrigger\r\n                    key={`top-${new Date().valueOf()}`}\r\n                    placement=\"top\"\r\n                    overlay={\r\n                        <Tooltip id={`tooltip-${new Date().valueOf()}`}>\r\n                            <div><img\r\n                                src={this.getLargeEmoteUrl(this.props.emote.urls)}\r\n                                alt={this.props.emote.name}/>\r\n                                <div>{this.props.emote.name}</div>\r\n                            </div>\r\n                        </Tooltip>\r\n                    }>\r\n                        <img srcSet={this.props.emote.urls} alt={this.props.emote.name}/>\r\n                    </OverlayTrigger>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Emote;\r\n","import React from \"react\";\r\n\r\nclass Clip extends React.Component {\r\n    /**\r\n     * Extract slug from message link to append to iframe\r\n     * @param link\r\n     * @returns {string}\r\n     */\r\n    parseClipLink(link) {\r\n        const parse = link.substr(link.indexOf(\".tv/\") + 4);\r\n        return `https://clips.twitch.tv/embed?clip=${parse}&parent=www.topchat.tv&parent=topchat.tv`;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div key={`clip-${new Date().valueOf()}`}>\r\n                <iframe src={this.parseClipLink(this.props.url)}\r\n                        allowFullScreen=\"true\"\r\n                        title=\"Twitch Clip\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clip;\r\n","import React from \"react\";\r\nimport Clip from \"./Clip\";\r\n\r\nclass Link extends React.Component {\r\n\r\n    /**\r\n     * Check if given link is a Twitch clip to embed\r\n     * @param url\r\n     * @returns {boolean}\r\n     */\r\n    isClip(url) {\r\n        return url.indexOf(\"clips.twitch.tv\") >= 0;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <span key={`link-${new Date().valueOf()}`}>\r\n                {this.isClip(this.props.url) ? <Clip url={this.props.url}/> :\r\n                    <a href={this.props.url} target=\"_blank\" rel=\"noreferrer\">{this.props.url}</a>}\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Link;\r\n","import React from \"react\";\r\nimport Link from \"./Link\";\r\n\r\nclass Text extends React.Component {\r\n    /**\r\n     * Check if given text is a link\r\n     * @param msg\r\n     * @returns {boolean}\r\n     */\r\n    isLink(msg) {\r\n        return msg.indexOf(\"https://\") === 0 || msg.indexOf(\"http://\") === 0;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <span>\r\n                {this.isLink(this.props.msg) ? <Link url={this.props.msg}/> : (this.props.msg + \" \")}\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Text;\r\n","import React from \"react\";\r\nimport BadgeList from \"./BadgeList\";\r\nimport \"./Chat.scss\"\r\nimport Emote from \"./Messages/Emote\";\r\nimport Text from \"./Messages/Text\";\r\n\r\nclass Chat extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.index = this.props.key;\r\n        this.message = this.props.msg;\r\n        this.user = this.props.user;\r\n        this.userCardUrl = this.props.userCardUrl;\r\n        this.badges = this.props.badgeList ? this.props.badgeList : [];\r\n        this.chatClass = \"chat-line__message tw-relative p-0 list-group-item bg-dark\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <li className={this.chatClass} key={this.index}>\r\n                <span className=\"text-light\">{this.props.time} </span>\r\n                <BadgeList key={`badges-list-${new Date().valueOf()}`} badges={this.badges}/>\r\n                <a className=\"username\" href={this.userCardUrl} style={this.user.style} target=\"_blank\" rel=\"noreferrer\">{this.user.username}</a>\r\n                <span className=\"text-light\">{this.message.map((msg, i) => typeof msg === \"string\" ?\r\n                    <Text key={`${msg + i}-${new Date().valueOf()}`} msg={msg}/> :\r\n                    <Emote key={`${msg + i}-${new Date().valueOf()}`} emote={msg}/>)}</span>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport './Header.scss';\r\n\r\nclass Streamer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {streamerInput : \"\"}\r\n    }\r\n\r\n    changeHandler(e) {\r\n        this.setState({streamerInput : e.target.value});\r\n    }\r\n\r\n    clickHandler() {\r\n        this.props.onClickHandler(this.state.streamerInput);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"d-flex\" id=\"header\">\r\n                <input className=\"form-control mr-4\" id=\"streamer-input\" onChange={this.changeHandler.bind(this)} placeholder=\"Enter Streamer\"/>\r\n                <button className=\"btn btn-primary p-1\" id=\"enter-btn\" onClick={this.clickHandler.bind(this)}>Enter Chat</button>\r\n                <small className=\"px-4\">{this.props.streamer}</small>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Streamer;\r\n","import React from \"react\";\r\nimport Chat from \"../Chat/Chat\";\r\nimport Streamer from \"./Streamer\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\n\r\nclass Main extends React.Component {\r\n    scrollToBottom = () => {\r\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Streamer onClickHandler={this.props.streamerClickHandler} streamer={this.props.streamer}/>\r\n                <Row>\r\n                    <Col sm={6} xs={12} className=\"pr-0\">\r\n                        <small className=\"text-light\">TOP CHAT</small>\r\n                        <ul id=\"top-chat\" className=\"list-group\">\r\n                            {this.props.msgs.map(msg => <Chat key={msg.key} time={msg.time} userCardUrl={msg.userCardUrl} badgeList={msg.badgeList} msg={msg.msg} user={msg.user}/>)}\r\n\r\n                            <li style={{ float:\"left\", clear: \"both\" }}\r\n                                 ref={(el) => { this.messagesEnd = el; }}>\r\n                            </li>\r\n                        </ul>\r\n                    </Col>\r\n                    <Col sm={6} xs={12} className=\"pl-0\">\r\n                        <iframe id=\"live-chat\" src={this.props.url}\r\n                                width={this.props.width}\r\n                                height={this.props.height}\r\n                        title=\"Streamer Chat\">\r\n                        </iframe>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import ComfyJS from \"comfy.js\";\nimport './App.scss';\nimport Main from \"./js/Main/Main\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from \"react\";\nimport GLOBAL_EMOTES from \"./GLOBAL_EMOTES.json\";\n\nconst EMOTES = {};\nlet currentEmotes = {};\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {topChats: [], url: \"\", width: 0, height: 0, streamer: \"No Active Stream\"};\n        ComfyJS.onChat = (user, message, flags, self, extra) => {\n            this.appendMessage(user, message, flags, extra);\n        }\n        this.currentStreamer = \"\";\n        window.addEventListener('resize', this.resizeHandler.bind(this));\n    }\n\n    componentDidMount() {\n        this.resizeHandler();\n    }\n\n    /**\n     * Gets padding for header section\n     */\n    getPadding(top, bottom) {\n        const parsedTop = Number(top.replace(\"px\",\"\"));\n        const parsedBottom = Number(bottom.replace(\"px\",\"\"));\n        return parsedTop + parsedBottom;\n    }\n\n    /**\n     * Resizes iframe and top chat when viewport changes\n     */\n    resizeHandler() {\n        const height = document.documentElement.clientHeight;\n        const width = document.documentElement.clientWidth;\n        const header = document.getElementById(\"header\");\n        const computedStyle = window.getComputedStyle(header);\n        const iframe = { height: height - header.offsetHeight, width : width/2 - 20}\n        if (width < 1285) {\n            iframe.width = width - 20;\n            iframe.height = height - document.getElementById(\"top-chat\").offsetHeight - header.offsetHeight- this.getPadding(computedStyle.paddingTop,computedStyle.paddingBottom) - 25 ;\n        }\n        this.setState(iframe);\n    }\n\n    /**\n     * Joins given streamer's chat\n     * @param streamer string value of streamer\n     */\n    joinStream(streamer) {\n        // Only attempt to connect if given a new streamer\n        if (streamer !== this.currentStreamer) {\n            // Disconnect from the previous chat if we have a connection already\n            if (this.currentStreamer) {\n                ComfyJS.Disconnect();\n            }\n            this.currentStreamer = streamer;\n            this.setState({streamer: this.currentStreamer, topChats: []});\n            ComfyJS.Init(streamer);\n            this.updateUrl(streamer)\n            this.getEmotes();\n        }\n    }\n\n    /**\n     * Retrieve the channel emotes for chat (Twitch, BTTV, 7TTV, FFZ)\n     */\n    getEmotes() {\n        const streamer = this.currentStreamer;\n        // If we cached the current streamers emotes, use the cached version instead of fetching\n        if (EMOTES[streamer]) {\n            // We already have the emotes, no need to refetch\n            // TODO: Add logic to check and refetch after x minutes\n            return;\n        }\n        fetch(`https://emotes.adamcy.pl/v1/channel/${streamer}/emotes/all`)\n            .then(response => response.json())\n            .then(json => {\n                if (json.error) {\n                    this.setState({streamer: `Could not find user ${streamer}, try again.`, url: \"\"});\n                    return;\n                }\n                    // Parse response into structure we use\n                    let massagedEmote = {};\n                    json.forEach(emote => massagedEmote[emote.code] = emote.urls.map(link => `${link.url} ${link.size}`));\n                    EMOTES[streamer] = {\n                        lastRetrieved: new Date().valueOf(),\n                        allEmotes: massagedEmote\n                    };\n                    currentEmotes = EMOTES[streamer].allEmotes;\n                },\n                error => {\n                    EMOTES[streamer] = {\n                        lastRetrieved: new Date().valueOf(),\n                        allEmotes: []\n                    }\n                    currentEmotes = {};\n                });\n    }\n\n    /**\n     * Event Handler for Enter Chat button click\n     * @param streamer string value of streamer\n     */\n    streamerClickHandler(streamer) {\n        if (!streamer) {\n            return;\n        }\n        this.joinStream(streamer);\n    }\n\n    /**\n     * Updates iframe's src url to connect to chat\n     * @param streamer string value of streamer to join\n     */\n    updateUrl(streamer) {\n        this.setState({url: `https://www.twitch.tv/embed/${streamer}/chat?parent=www.topchat.tv&parent=topchat.tv&darkpopout`});\n    }\n\n    getEmote(name) {\n\n        if (GLOBAL_EMOTES[name]) {\n            return GLOBAL_EMOTES[name];\n        }\n        if (currentEmotes[name]) {\n            return currentEmotes[name];\n        }\n        return false;\n    }\n\n    /**\n     * Parse through chatter's message to look for potential emotes in any\n     * @param msg chatter's message string\n     * @returns {*} array of plaintext and emote objects found in message\n     */\n    parseForEmotes(msg) {\n        // Iterate through each word, returning an emote object if an emote if found, otherwise return the plaintext word\n        return msg.split(\" \").map(str => {\n            const emote = this.getEmote(str)\n            if (emote) {\n                return {name: str, urls: emote.join(\",\")};\n            }\n            return str;\n        });\n    }\n\n    /**\n     * Adds new message to TopChat if message if from elevated user\n     * @param user\n     * @param message\n     * @param flags\n     * @param extra\n     */\n    appendMessage(user, message, flags, extra) {\n        const badges = [];\n        let isElevatedUser = false;\n        let userMessage = message;\n        if (flags.broadcaster) {\n            badges.push({key: \"broadcaster\" + new Date().valueOf(), type: \"broadcaster\", name: \"Broadcaster\"});\n            isElevatedUser = true;\n        }\n        if (flags.mod) {\n            badges.push({key: \"mod\" + new Date().valueOf(), type: \"mod\", name: \"Moderator\"});\n            isElevatedUser = true;\n        }\n        if (flags.vip) {\n            badges.push({key: \"vip\" + new Date().valueOf(), type: \"vip\", name: \"VIP\"});\n            isElevatedUser = true;\n        }\n        if ((extra.userBadges && extra.userBadges.partner)) {\n            badges.push({key: \"partner\" + new Date().valueOf(), type: \"partner\", name: \"Partner\"});\n            isElevatedUser = true;\n        }\n        if (!isElevatedUser) {\n            return;\n        }\n        if (user === \"エネス\") {\n            console.log(extra);\n        }\n        const msg = `: ${userMessage}`;\n        const allChat = this.state.topChats;\n        const newEntry = {\n            key: user + new Date().valueOf(),\n            badgeList: badges,\n            msg: this.parseForEmotes(msg),\n            userCardUrl: `https://www.twitch.tv/popout/${this.currentStreamer}/viewercard/${user}`,\n            time: new Date(Number(extra.timestamp)).toTimeString().substr(0, 8),\n            user: {username: user, style: {color: extra.userColor}}\n        };\n        if (allChat.length > 100) {\n            allChat.shift();\n        }\n        this.setState({topChats: [...allChat, newEntry]});\n\n    }\n\n    render() {\n        return (\n            <div className=\"App bg-dark text-light\">\n                <Main msgs={this.state.topChats} url={this.state.url} height={this.state.height}\n                      width={this.state.width}\n                      streamerClickHandler={this.streamerClickHandler.bind(this)} streamer={this.state.streamer}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}